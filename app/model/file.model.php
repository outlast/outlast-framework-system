<?php
	/**
	 * A built-in model to handle files and uploads.
	 * @package Model
	 * @subpackage BuiltinModels
	 * @todo Add additional checks to disable certain file types.
	 */

	/**
	 * @property zajDataFile $data
	 * @property string $status
	 * @property string $class The class of the parent.
	 * @property string $parent The id of the parent.
	 * @property string $field The field name of the parent.
	 * @property integer $time_create
	 * @property string $mime The mime type of the file.
	 * @property string $extension Extension, not including the dot
	 * Magic properties
	 * @property string $relative Returns path/url relative to base.
	 * @property string $path Alias of relative.
	 * @property boolean $temporary If set to true, the file is not yet saved to the database.
	 * Methods
	 * @method static File|zajFetcher fetch($id = '')
	 **/
	class File extends zajModel {

		/**
		 * Temporary path of files from basepath.
		 * @var string
		 * @todo move this to data folder!
		 **/
		protected static string $temporary_path = 'cache/upload/';

		/**
		 * Relative path of files from basepath.
		 * @var string
		 **/
		protected static string $relative_path = 'data/private/File/';

        /**
         * __model function. creates the database fields available for objects of this class.
         * @param stdClass $fields The field's object generated by the child class.
         * @return stdClass Returns an object containing the field settings as parameters.
         */
        static function __model(stdClass $fields = new stdClass()) : stdClass {

            $fields->name = zajDb::name();
			$fields->class = zajDb::text();
			$fields->parent = zajDb::text();
			$fields->field = zajDb::text();
			$fields->mime = zajDb::text();
			$fields->encoding = zajDb::text();
			$fields->size = zajDb::integer();
			$fields->description = zajDb::textbox();
			$fields->status = zajDb::select(["new", "uploaded", "saved", "deleted"], "new");

			// deprecated because everything is timepath now! Always true.
			$fields->timepath = zajDb::boolean(true);
			$fields->original = zajDb::text();

			// do not modify the line below!
			return parent::__model($fields);
		}

		/**
		 * Cache stuff.
		 **/
		public function __afterFetch() {
			// Set status and parents
			$this->status = $this->data->status;
			$this->class = $this->data->class;
			$this->parent = $this->data->parent;
			$this->field = $this->data->field;
			$this->time_create = $this->data->time_create;
			// Get file path info
			$this->extension = $this->ofw->file->get_extension($this->name);
			$this->mime = $this->data->mime;
			// Magic property 'relative', 'path'
			// Magic property 'temporary'
		}

		/**
		 * Returns the relative or full path.
		 * @param string $name The name of the variable.
		 * @return mixed Returns its value.
		 **/
		public function __get($name) {
			switch ($name) {
				case 'tempoary':
					return $this->temporary;
				case 'path':
				case 'relative':
					return $this->get_file_path($this->id);
				default:
					return parent::__get($name);
			}
		}

		/**
		 * Helper function which returns the final path based on the current settings.
		 * @param string|boolean $filename Defaults to the standard file name.
		 * @param boolean $create_folders Create the subfolders if needed.
		 * @return string Returns the file path, relative to basepath.
		 **/
		public function get_file_path($filename = false, $create_folders = false) {
			// Default filename
			if ($filename === false) {
				$filename = $this->id.'.file';
			}
			// First, let's determine which function to use
			$path = $this->ofw->file->get_time_path(self::$relative_path, $filename, $this->time_create, false);
			// Create folders if requested
			if ($create_folders) {
				$this->ofw->file->create_path_for($this->ofw->basepath.$path);
			}

			// Now call and return!
			return $path;
		}

		/**
		 * Helper function which returns the temporary path where the file is stored after upload but before save.
		 * @param boolean $create_folders Create the subfolders if needed.
		 * @return string Returns the file path, relative to basepath.
		 **/
		public function get_temporary_path($create_folders = false) {
			// Default filename
			$filename = $this->id.'.tmp';
			// Get path
			$path = self::$temporary_path.$filename;
			// Create folders if requested
			if ($create_folders) {
				$this->ofw->file->create_path_for($this->ofw->basepath.$path);
			}

			// Return temporary path
			return $path;
		}

		/**
		 * Get the file extension type.
		 * @param string|boolean $file_path The path whoes extension we wish to check. Defaults to the master file path.
		 * @return string Will return the file's extension.
		 * @deprecated Use file lib instead.
		 */
		public function get_extension($file_path = false) {
			if ($file_path !== false) {
				return $this->ofw->file->get_extension($file_path);
			} else {
				return $this->extension;
			}
		}

		/**
		 * Underlying permanent physical file exists or not.
		 * @return boolean True if yes, false if not.
		 */
		public function file_exists() {
			return file_exists($this->ofw->basepath.$this->get_file_path());
		}

		/**
		 * Forces a download dialog for the browser.
		 * @param boolean $force_download If set to true (default), this will force a download for the user.
		 * @param string|boolean $download_as The file name to download as. Defaults to the uploaded file name.
		 * @return void|boolean This will force a download and exit. May return false if it fails.
		 */
		public function download($force_download = true, $download_as = false) {
			// get default file name
			if (!$this->exists || $this->data->status == 'uploaded') {
				$file_relative_path = $this->get_temporary_path();
			} else {
				$file_relative_path = $this->get_file_path();
			}
			// double check that file name is ok
			$file_relative_path = $this->ofw->file->file_check($file_relative_path,
				"Invalid file requested for download.");
			// get full path
			$file_full_path = $this->ofw->basepath.$file_relative_path;
			// set download file name
			if ($download_as === false) {
				$download_as = $this->name;
			}
			// get mime type, try to determine if not set
			$mime = $this->data->mime;
			if (empty($mime)) {
				$mime = $this->ofw->file->get_mime_type($download_as, $file_relative_path);
			}
			if (!file_exists($file_full_path)) {
				$this->ofw->warning("File $file_full_path was requested for download but is missing.");
				exit("The requested file is missing.");
			}
			// pass file thru to user
			header('Content-Type: '.$mime);
			header('Content-Length: '.filesize($file_full_path));
			if ($force_download) {
				header('Content-Disposition: attachment; filename="'.$download_as.'"');
			} else {
				header('Content-Disposition: inline; filename="'.$download_as.'"');
			}
			ob_clean();
			flush();
			readfile($file_full_path);
			// now exit
			exit;
		}

		/**
		 * Shows the file in the browser inline (if available)
		 * @param string|boolean $file_name The file name to download as. Defaults to the uploaded file name.
		 * @return void|boolean This will try to show the file inline and exit.
		 */
		public function show($file_name = false) {
			return $this->download(false, $file_name);
		}

		/**
		 * Overrides the global duplicate method. Unlike the standard duplicate method, this actually saves the object.
		 * @param string|boolean $id Use this to override random id generation.
		 * @param zajModel|boolean $parent The optional parent object. You can always set this later. If you set this, you must also set the $field parameter.
		 * @param string|boolean $field The name of the field. Required if you set the parent object.
		 * @return File Returns a new file object with the physical file duplicated as well.
		 */
		public function duplicate(string|int|null $id = null, zajModel|bool $parent = false, string|bool $field = false) : File {
			// First duplicate my object
			/** @var File $new_object */
			$new_object = parent::duplicate($id);
			$new_object->set('status', 'uploaded')->save();

			// Set parent
			if ($parent) {
				// @todo change these to fatal errors
				if (!zajModel::is_instance_of_me($parent)) {
					$this->ofw->warning("Parent is not a zajModel. You need a zajModel object as the parent for duplication! This will be a fatal error in future versions.");
				}
				if (!$field) {
					$this->ofw->warning("Field is not set during duplication! This is a required parameter and will be a fatal error in future versions.");
				}

				// Set the parent
				/** @var zajModel $parent */
				if (is_string($parent)) {
					// @todo remove this backwards compatibility
					$new_object->set('parent', $parent);
				} else {
					$new_object->set('parent', $parent->id);
					$new_object->set('class', $parent->class_name);
				}

				$new_object->set('field', $field);
			} else {
				$new_object->set('parent', '');
				$new_object->set('class', '');
				$new_object->set('field', '');
			}

			// Create a copy of my original file
			$original_file = $this->ofw->basepath.$this->get_file_path();
			$new_file = $this->ofw->basepath."cache/upload/".$new_object->id.".tmp";
			copy($original_file, $new_file);
			// Create my object
			$new_object->upload();

			return $new_object;
		}

		/**
		 * Overrides the global delete.
		 * @param bool $permanent If set to true, the file will be deleted too and the full entry will be removed.
		 * @return bool Returns true if successful.
		 **/
		public function delete(bool $permanent = false) : bool {
			// Remove the files as well?
			if ($permanent) {
				@unlink($this->ofw->basepath.$this->get_file_path());
			}

			// call parent
			return parent::delete($permanent);
		}

		/**
		 * Method which saves file to its final location.
		 **/
		public function upload() {
			// Make sure this file is currently not saved. But even if so, save again because this is what we expect!
			if ($this->data->status == 'saved') {
				$this->save();

				return false;
			}
			// Get temporary and final names
			$temp_path = $this->get_temporary_path();
			$new_path = $this->get_file_path(false, true);
			// Move tmpname to new location and set permissions
			rename($this->ofw->basepath.$temp_path, $this->ofw->basepath.$new_path);
			chmod($this->ofw->basepath.$new_path, 0644);
			// Save my final meta data
			$this->set('mime', $this->ofw->file->get_mime_type($this->name));
			$this->set('size', filesize($this->ofw->basepath.$new_path));
			$this->set('status', 'saved');
			$this->save();

			return $this;
		}

		/*****************************************
		 * Static methods used to create uploads.
		 *****************************************/

		/**
		 * Creates a file with a specific parent object and field.
		 * @param zajModel|string $parent The parent object.
		 * @param string $field The name of the field.
		 * @return zajModel|bool Returns a new bare object with the parent and field set.
		 */
		public static function create_with_parent($parent, $field) {
			// Check parent object
			if (!zajModel::is_instance_of_me($parent)) {
				$class_name = get_called_class();

				return zajLib::me()->error("You tried to create a new $class_name with an invalid parent. You must pass an object instead of an id.");
			}
			// Creata a new object
			$pobj = self::create();
			$pobj->set('parent', $parent->id);
			$pobj->set('class', $parent->class_name);
			$pobj->set('field', $field);

			return $pobj;
		}

		/**
		 * Creates and saves a file object from a file or url. Will return false if it is not found.
		 * @param string $url_or_file_name The url or file name.
		 * @param zajModel|bool $parent My parent object or id. If not specified, none will be set.
		 * @param string|bool $field The field name of the parent. This is required if $parent is set.
		 * @param boolean $save_now_to_final_destination If set to true (the default) it will be saved in the final folder immediately. Otherwise it will stay in the tmp folder.
		 * @return self Returns the new file object or false if none created.
		 **/
		public static function create_from_file($url_or_file_name, $parent = false, $field = null, $save_now_to_final_destination = true
		) {
			// Create object
			/** @var self $pobj * */
			if ($parent != null) {
				$pobj = self::create_with_parent($parent, $field);
			} else {
				$pobj = self::create();
			}
			// Set basics
			$pobj->set('name', basename($url_or_file_name));
			$pobj->name = basename($url_or_file_name);
			// Copy to tmp destination
			$tmp_path = $pobj->get_temporary_path(true);
			copy($url_or_file_name, zajLib::me()->basepath.$tmp_path);
			chmod(zajLib::me()->basepath.$tmp_path, 0644);
			// Save or just be temporary
			if ($save_now_to_final_destination) {
				$pobj->upload();
			} else {
				$pobj->temporary = true;
			}
			$pobj->save();

			return $pobj;
		}

		/**
		 * Creates and saves a file object from a url. Will return false if it is not an image or not found.
		 * @param string $url The url. Will return false if not valid url.
		 * @param zajModel|bool $parent My parent object or id. If not specified, none will be set.
		 * @param string|bool $field The field name of the parent. This is required if $parent is set.
		 * @param boolean $save_now_to_final_destination If set to true (the default) it will be saved in the final folder immediately. Otherwise it will stay in the tmp folder.
		 * @return self|bool Returns the new file object or false if none created.
		 **/
		public static function create_from_url($url, $parent = false, $field = null, $save_now_to_final_destination = true
		) {
			if (!zajLib::me()->url->valid($url)) {
				return false;
			}

			return self::create_from_file($url, $parent, $field, $save_now_to_final_destination);
		}

		/**
		 * Creates a file object from a standard upload HTML4
		 * @param string $field_name The name of the file input field.
		 * @param zajModel|bool $parent My parent object.
		 * @param string|bool $field The field name of the parent. This is required if $parent is set.
		 * @param boolean $save_now_to_final_destination If set to true (the default) it will be saved in the final folder immediately. Otherwise it will stay in the tmp folder.
		 * @return self|bool Returns the file object on success, false if not.
		 **/
		public static function create_from_upload($field_name, $parent = false, $field = null, $save_now_to_final_destination = true
		) : ?self {
			// File names
			$orig_name = $_FILES[$field_name]['name'];
			$tmp_name = $_FILES[$field_name]['tmp_name'];
			// If no file, return false
			if (empty($tmp_name)) {
				return null;
			}
			// Now create file object and set me
			/** @var self $pobj * */
			if ($parent != null) {
				$pobj = self::create_with_parent($parent, $field);
			} else {
				$pobj = self::create();
			}
			// Move uploaded file to temporary folder
			$tmp_path = $pobj->get_temporary_path(true);
			move_uploaded_file($tmp_name, zajLib::me()->basepath.$tmp_path);
			chmod(zajLib::me()->basepath.$tmp_path, 0644);
			// Now set and save
			$pobj->set('name', $orig_name);
			$pobj->name = $orig_name;
			$pobj->set('status', 'uploaded');
			if ($save_now_to_final_destination) {
				$pobj->upload();
			} else {
				$pobj->save();
			}
			// Remove temporary file
			@unlink($tmp_name);

			return $pobj;
		}

		/**
		 * Creates a file object from php://input stream.
		 * @param zajModel|bool $parent My parent object.
		 * @param string|bool $field The field name of the parent. This is required if $parent is set.
		 * @param boolean $save_now_to_final_destination If set to true (the default) it will be saved in the final folder immediately. Otherwise it will stay in the tmp folder.
		 * @return self|bool Returns the file object on success, false if not.
		 **/
		public static function create_from_stream($parent = false, $field = null, $save_now_to_final_destination = true
		) {
			// Get raw data
			$raw_data = file_get_contents("php://input");

			// Now create from raw data!
			return self::create_from_raw($raw_data, $parent, $field, $save_now_to_final_destination);
		}

		/**
		 * Creates a file object from base64 data.
		 * @param string $base64_data This is the file data, base64-encoded.
		 * @param zajModel|bool $parent My parent object.
		 * @param string|bool $field The field name of the parent. This is required if $parent is set.
		 * @param boolean $save_now_to_final_destination If set to true (the default) it will be saved in the final folder immediately. Otherwise it will stay in the tmp folder.
		 * @return self|bool Returns the file object on success, false if not.
		 **/
		public static function create_from_base64($base64_data, $parent = false, $field = null, $save_now_to_final_destination = true
		) {
			// Allow data-urls with base64 data
			$base64_data = preg_replace("|data:[A-z0-9/]+;base64,|", "", $base64_data);
			// Get raw data
			$raw_data = base64_decode($base64_data);

			// Now create from raw data!
			return self::create_from_raw($raw_data, $parent, $field, $save_now_to_final_destination);
		}

		/**
		 * Create a file object from raw data.
		 * @param string|boolean $raw_data If specified, this will be used instead of input stream data.
		 * @param zajModel|bool $parent My parent object.
		 * @param string|bool $field The field name of the parent. This is required if $parent is set.
		 * @param boolean $save_now_to_final_destination If set to true (the default) it will be saved in the final folder immediately. Otherwise it will stay in the tmp folder.
		 * @return self|bool Returns the file object on success, false if not.
		 */
		public static function create_from_raw($raw_data, $parent = false, $field = null, $save_now_to_final_destination = true) {
			// Create a self object
			/** @var self $pobj * */
			if ($parent != null) {
				$pobj = self::create_with_parent($parent, $field);
			} else {
				$pobj = self::create();
			}
			// Create the temporary file
			$tmp_path = $pobj->get_temporary_path(true);
			file_put_contents(zajLib::me()->basepath.$tmp_path, $raw_data);
			chmod(zajLib::me()->basepath.$tmp_path, 0644);
			// Now set stuff
			$pobj->set('name', 'Upload');
			$pobj->set('status', 'uploaded');
			if ($save_now_to_final_destination) {
				$pobj->upload();
			} else {
				$pobj->save();
			}

			return $pobj;
		}

	}